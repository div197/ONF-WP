#!/usr/bin/env bash

# ONF-WP v1.0.0-Alpha - Unified CLI Tool
# Orange Network Foundation WordPress Development Environment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# ONF-WP ASCII Art
show_banner() {
    echo -e "${CYAN}"
    cat << "EOF"
   ___  _   _ _____      __        ____  
  / _ \| \ | |  ___|    / /       |  _ \ 
 | | | |  \| | |_      / /_  __   | |_) |
 | |_| | |\  |  _|    / /\ \/ /   |  __/ 
  \___/|_| \_|_|     /_/  >  <    |_|    
                          /_/\_\         
                                         
Orange Network Foundation WordPress
v1.0.0-Alpha - Revolutionary Architecture
EOF
    echo -e "${NC}"
}

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_DEV_FILE="$PROJECT_ROOT/deployments/docker-compose/docker-compose.dev.yml"
COMPOSE_PROD_FILE="$PROJECT_ROOT/deployments/docker-compose/docker-compose.prod.yml"
ENV_DEV_FILE="$PROJECT_ROOT/environments/.env.dev.example"
ENV_PROD_FILE="$PROJECT_ROOT/environments/.env.prod.example"

# Help function
show_help() {
    echo -e "${WHITE}ONF-WP v1.0.0-Alpha - Revolutionary CLI Tool${NC}"
    echo ""
    echo -e "${YELLOW}USAGE:${NC}"
    echo "  ./onf-wp <command> [options]"
    echo ""
    echo -e "${YELLOW}üöÄ CORE COMMANDS:${NC}"
    echo -e "  ${GREEN}dev${NC}                    Start development environment"
    echo -e "  ${GREEN}prod${NC}                   Start production environment"
    echo -e "  ${GREEN}stop${NC}                   Stop all services"
    echo -e "  ${GREEN}restart${NC}                Restart all services"
    echo -e "  ${GREEN}setup${NC}                  Initial project setup"
    echo -e "  ${GREEN}health${NC}                 Health check"
    echo ""
    echo -e "${YELLOW}üîß MANAGEMENT COMMANDS:${NC}"
    echo -e "  ${GREEN}logs${NC} [service]         Show logs for service"
    echo -e "  ${GREEN}shell${NC} [service]        Access service shell"
    echo -e "  ${GREEN}wp${NC} <command>           Execute WP-CLI command"
    echo -e "  ${GREEN}status${NC}                 Show service status"
    echo -e "  ${GREEN}clean${NC}                  Clean up containers and volumes"
    echo ""
    echo -e "${YELLOW}üéØ REVOLUTIONARY VOLUME COMMANDS:${NC}"
    echo -e "  ${GREEN}volume${NC} strategy <type>  Switch volume strategy (docker|hybrid|bindmount)"
    echo -e "  ${GREEN}volume${NC} status           Show volume status"
    echo -e "  ${GREEN}volume${NC} export [type]    Export from Docker volumes"
    echo -e "  ${GREEN}volume${NC} sync [type]      Sync development assets"
    echo -e "  ${GREEN}volume${NC} migrate detect   Detect current setup"
    echo -e "  ${GREEN}volume${NC} migrate to-docker Migrate to Docker volumes"
    echo ""
    echo -e "${YELLOW}üìä EXAMPLES:${NC}"
    echo "  ./onf-wp dev                        # Start development environment"
    echo "  ./onf-wp volume strategy docker     # Switch to Docker volume strategy"
    echo "  ./onf-wp volume sync themes         # Sync themes to host for development"
    echo "  ./onf-wp volume migrate to-docker   # Migrate from bind mounts to Docker volumes"
    echo "  ./onf-wp wp plugin list             # List WordPress plugins"
    echo "  ./onf-wp logs php                   # Show PHP service logs"
    echo ""
    echo -e "${CYAN}üéâ Revolutionary Features: 100% Docker volumes, cross-platform portability!${NC}"
    echo ""
}

# Check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker is not running. Please start Docker Desktop.${NC}"
        exit 1
    fi
}

# Load environment
load_env() {
    local env_file="$1"
    if [[ -f "$env_file" ]]; then
        set -a
        source "$env_file"
        set +a
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Environment file not found: $env_file${NC}"
    fi
}

# Start development environment
start_dev() {
    echo -e "${BLUE}üöÄ Starting ONF-WP Development Environment...${NC}"
    check_docker
    load_env "$ENV_DEV_FILE"
    docker-compose -f "$COMPOSE_DEV_FILE" up -d
    echo -e "${GREEN}‚úÖ Development environment started!${NC}"
    echo -e "${CYAN}üåê Access your site at: https://${PROJECT_DOMAIN:-localhost}${NC}"
}

# Start production environment
start_prod() {
    echo -e "${BLUE}üöÄ Starting ONF-WP Production Environment...${NC}"
    check_docker
    load_env "$ENV_PROD_FILE"
    docker-compose -f "$COMPOSE_PROD_FILE" up -d
    echo -e "${GREEN}‚úÖ Production environment started!${NC}"
    echo -e "${CYAN}üåê Access your site at: https://${PROJECT_DOMAIN:-localhost}${NC}"
}

# Stop services
stop_services() {
    echo -e "${YELLOW}üõë Stopping ONF-WP services...${NC}"
    docker-compose -f "$COMPOSE_DEV_FILE" down 2>/dev/null || true
    docker-compose -f "$COMPOSE_PROD_FILE" down 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Services stopped!${NC}"
}

# Show logs
show_logs() {
    local service="${1:-}"
    if [[ -n "$service" ]]; then
        docker-compose -f "$COMPOSE_DEV_FILE" logs -f "$service"
    else
        docker-compose -f "$COMPOSE_DEV_FILE" logs -f
    fi
}

# Access shell
access_shell() {
    local service="${1:-php}"
    echo -e "${BLUE}üêö Accessing $service shell...${NC}"
    docker-compose -f "$COMPOSE_DEV_FILE" exec "$service" /bin/bash
}

# Execute WP-CLI command
wp_cli() {
    echo -e "${BLUE}üîß Executing WP-CLI: $*${NC}"
    docker-compose -f "$COMPOSE_DEV_FILE" exec wpcli wp "$@"
}

# Volume management commands
volume_management() {
    local volume_script="$PROJECT_ROOT/scripts/volume-management/volume-manager.sh"
    
    if [[ -f "$volume_script" ]]; then
        bash "$volume_script" "$@"
    else
        echo -e "${RED}‚ùå Volume manager script not found${NC}"
        exit 1
    fi
}

# Show status
show_status() {
    echo -e "${BLUE}üìä ONF-WP Service Status:${NC}"
    docker-compose -f "$COMPOSE_DEV_FILE" ps
}

# Health check (Comprehensive)
health_check() {
    local health_script="$PROJECT_ROOT/scripts/maintenance/health-check.sh"
    
    if [[ -f "$health_script" ]]; then
        echo -e "${BLUE}üöÄ Running comprehensive health check...${NC}"
        bash "$health_script"
    else
        echo -e "${BLUE}üè• ONF-WP Basic Health Check:${NC}"
        
        # Check Docker
        if docker info >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Docker: Running${NC}"
        else
            echo -e "${RED}‚ùå Docker: Not running${NC}"
            return 1
        fi
        
        # Check services
        local services=($(docker-compose ps --services 2>/dev/null || echo ""))
        for service in "${services[@]}"; do
            if docker-compose ps "$service" | grep -q "Up"; then
                echo -e "${GREEN}‚úÖ $service: Running${NC}"
            else
                echo -e "${RED}‚ùå $service: Not running${NC}"
            fi
        done
    fi
}

# Setup project (Revolutionary)
setup_project() {
    local revolutionary_setup="$PROJECT_ROOT/scripts/setup/revolutionary-setup.sh"
    
    if [[ -f "$revolutionary_setup" ]]; then
        echo -e "${BLUE}üöÄ Launching Revolutionary ONF-WP Setup...${NC}"
        bash "$revolutionary_setup"
    else
        echo -e "${BLUE}üîß Setting up ONF-WP v1.0.0-Alpha (Legacy Mode)...${NC}"
        
        # Copy environment files
        if [[ ! -f "$PROJECT_ROOT/.env" ]]; then
            cp "$ENV_DEV_FILE" "$PROJECT_ROOT/.env" 2>/dev/null || true
            echo -e "${GREEN}‚úÖ Created .env file${NC}"
        fi
        
        # Create storage directories
        mkdir -p "$PROJECT_ROOT/storage/"{wordpress,uploads,backups,logs}
        echo -e "${GREEN}‚úÖ Created storage directories${NC}"
        
        # Set permissions
        chmod +x "$PROJECT_ROOT/scripts/deployment/"*.sh 2>/dev/null || true
        chmod +x "$PROJECT_ROOT/scripts/development/"*.sh 2>/dev/null || true
        chmod +x "$PROJECT_ROOT/scripts/maintenance/"*.sh 2>/dev/null || true
        chmod +x "$PROJECT_ROOT/scripts/setup/"*.sh 2>/dev/null || true
        
        echo -e "${GREEN}üéâ ONF-WP setup complete!${NC}"
        echo -e "${CYAN}üí° Run './onf-wp dev' to start development environment${NC}"
    fi
}

# Main command handler
main() {
    case "${1:-help}" in
        "dev"|"development")
            start_dev
            ;;
        "prod"|"production")
            start_prod
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            sleep 2
            start_dev
            ;;
        "logs")
            show_logs "${2:-}"
            ;;
        "shell"|"bash")
            access_shell "${2:-php}"
            ;;
        "wp")
            shift
            wp_cli "$@"
            ;;
        "volume")
            shift
            volume_management "$@"
            ;;
        "status"|"ps")
            show_status
            ;;
        "health"|"check")
            health_check
            ;;
        "setup"|"init")
            setup_project
            ;;
        "clean")
            echo -e "${YELLOW}üßπ Cleaning up containers and volumes...${NC}"
            docker-compose -f "$COMPOSE_DEV_FILE" down -v --remove-orphans
            docker-compose -f "$COMPOSE_PROD_FILE" down -v --remove-orphans
            echo -e "${GREEN}‚úÖ Cleanup complete!${NC}"
            ;;
        "help"|"-h"|"--help")
            show_banner
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo -e "${YELLOW}üí° Run './onf-wp help' for available commands${NC}"
            exit 1
            ;;
    esac
}

# Show banner for interactive commands
if [[ "${1:-}" != "wp" ]] && [[ "${1:-}" != "logs" ]]; then
    show_banner
fi

# Execute main function
main "$@" 